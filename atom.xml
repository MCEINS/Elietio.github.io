<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>零の轨迹</title>
  
  <subtitle>Sic Parvis Magna</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.elietio.xyz/"/>
  <updated>2019-09-29T14:13:26.681Z</updated>
  <id>https://www.elietio.xyz/</id>
  
  <author>
    <name>Elietio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Oracle批量插入数据异常 java.lang.ArrayIndexOutOfBoundsException</title>
    <link href="https://www.elietio.xyz/2019/08/Oracle%20java.lang.ArrayIndexOutOfBoundsException.html"/>
    <id>https://www.elietio.xyz/2019/08/Oracle java.lang.ArrayIndexOutOfBoundsException.html</id>
    <published>2019-08-28T12:14:49.000Z</published>
    <updated>2019-09-29T14:13:26.681Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天测试过程中一个Oracle mybatis批量插入数据的代码报出了一个异常<br> <code>Caused by: java.lang.ArrayIndexOutOfBoundsException: -32768</code><br><a id="more"></a><br>具体异常堆栈信息如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.ArrayIndexOutOfBoundsException: -<span class="number">32768</span></span><br><span class="line">        at oracle.jdbc.driver.OraclePreparedStatement.setupBindBuffers(OraclePreparedStatement.java:<span class="number">2673</span>)</span><br><span class="line">        at oracle.jdbc.driver.OraclePreparedStatement.processCompletedBindRow(OraclePreparedStatement.java:<span class="number">2206</span>)</span><br><span class="line">        at oracle.jdbc.driver.OraclePreparedStatement.executeInternal(OraclePreparedStatement.java:<span class="number">3365</span>)</span><br><span class="line">        at oracle.jdbc.driver.OraclePreparedStatement.execute(OraclePreparedStatement.java:<span class="number">3476</span>)</span><br><span class="line">        at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:<span class="number">3409</span>)</span><br><span class="line">        at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:<span class="number">619</span>)</span><br><span class="line">        at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:<span class="number">3407</span>)</span><br><span class="line">        at com.alibaba.druid.filter.FilterAdapter.preparedStatement_execute(FilterAdapter.java:<span class="number">1080</span>)</span><br><span class="line">        at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:<span class="number">3407</span>)</span><br><span class="line">        at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:<span class="number">440</span>)</span><br><span class="line">        at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:<span class="number">3407</span>)</span><br><span class="line">        at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:<span class="number">167</span>)</span><br><span class="line">        at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:<span class="number">498</span>)</span><br></pre></td></tr></table></figure></p><p>感觉很奇怪，查看日志SQL打印，这个方也就拼接了400条SQL，参数也不是很多，于是从日志里面copy了一下接口入参在本地用Postman debug了一下，结果第一次居然入库成功，再执行一次，出现了同样的错误，再执行，又成功……反复如此，顿时懵逼。看异常信息，执行ojdbc包内的<code>oracle.jdbc.driver.OraclePreparedStatement.setupBindBuffers</code>方法数组下标越界，好吧，放Google搜一下，发现一段这样描述</p><blockquote><p>The 10g driver apparently keeps a global serialnumber for all parameters in the entire batch, with a “short”variable. So you can have at most 32768 parameters in the batch. I was havingthe same exception because I have a INSERT statement with 42 parameters and mybatches can be as big as 1000 records, so 42000 &gt; 32768 and this overflowsto a negative index. I reduced the batch factor to 100 to be safe, and all iswell. I guess your update DML should have a larger number of parameters perrecord, right? (My diagnostic of the bug is just deduction from the symptoms)<br><a href="https://community.oracle.com/thread/599441?start=15&amp;tstart=0&gt;" target="_blank" rel="noopener">https://community.oracle.com/thread/599441?start=15&amp;tstart=0&gt;</a></p></blockquote><p>说是10g driver statement最大允许参数个数为32768，超过会报错。似乎有点类似，但是我只插入了400条啊，而且每个SQL参数只有9个，也就是3600个参数，远小于32768。<br>还有另外一个说法</p><blockquote><p>In Oracle Metalink (Oracle’s support site - Note ID 736273.1) I found that this is a bug in JDBC adapter (version 10.2.0.0.0 to 11.1.0.7.0) that when you call preparedStatement with more than 7 positional parameters then JDBC will throw this error.<br><a href="https://stackoverflow.com/questions/277744/jdbc-oracle-arrayindexoutofboundsexception" target="_blank" rel="noopener">https://stackoverflow.com/questions/277744/jdbc-oracle-arrayindexoutofboundsexception</a></p></blockquote><p>感觉也不符合，但是从搜索的结果看，10g 的 ojdbc似乎确实有些问题，于是看了下pom，乖乖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ojdbc14<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc14<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>10.2.0.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>那么换个版本吧，我们数据库是11.2g的，于是换了个ojdbc6<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>11.2.0.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>嗯，这次很顺利，没有再出现异常，看来ojdbc14确实有些问题，但是还是比较疑惑，单单400条数据，每条9个参数就已经超过限制了吗？<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertBatch"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span>&gt;</span></span><br><span class="line">        INSERT INTO table (HSTRY_ID, PB_BOND_ID, APPID,</span><br><span class="line">        SR_NO_ID, GRP_ID, TNDR_PRC,</span><br><span class="line">        THE_REF_YLD, CRT_TM, UPD_TM</span><br><span class="line">        )</span><br><span class="line">        SELECT SEQ.nextval,A.* FROM (</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">"union all"</span>&gt;</span></span><br><span class="line">            SELECT</span><br><span class="line">            #&#123;item.pbBondId,jdbcType=BIGINT&#125;, #&#123;item.appId,jdbcType=VARCHAR&#125;,</span><br><span class="line">            #&#123;item.srNoId,jdbcType=BIGINT&#125;, #&#123;item.grpId,jdbcType=VARCHAR&#125;, #&#123;item.tndrPrc,jdbcType=VARCHAR&#125;,</span><br><span class="line">            #&#123;item.theRefYld,jdbcType=VARCHAR&#125;, #&#123;item.crtTm,jdbcType=TIMESTAMP&#125;, #&#123;item.updTm,jdbcType=TIMESTAMP&#125;</span><br><span class="line">            FROM dual</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span>) A</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>拼接下来实际SQL如下，类似于insert  into tableA select * from tableB<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span> (HSTRY_ID, PB_BOND_ID, APPID, SR_NO_ID, GRP_ID, TNDR_PRC, THE_REF_YLD, CRT_TM, UPD_TM)</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    SEQ.nextval,</span><br><span class="line">    A.*</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">( <span class="keyword">SELECT</span> ?, ?, ?, ?, ?, ?, ?, ? <span class="keyword">FROM</span> dual </span><br><span class="line"> <span class="keyword">union</span> all </span><br><span class="line">   <span class="keyword">SELECT</span> ?, ?, ?, ?, ?, ?, ?, ? <span class="keyword">FROM</span> dual </span><br><span class="line"> <span class="keyword">union</span> all </span><br><span class="line">      <span class="keyword">SELECT</span> ?, ?, ?, ?, ?, ?, ?, ? <span class="keyword">FROM</span> dual</span><br><span class="line"> <span class="keyword">union</span> all </span><br><span class="line"> ......</span><br><span class="line">    ) A</span><br></pre></td></tr></table></figure></p><p>实际debug了一下，确实出异常的时候OraclePreparedStatement.setupBindBuffers方法short数组 bindIndicators大小超过了32768，换成ojdbc6的时候该方法未调用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天测试过程中一个Oracle mybatis批量插入数据的代码报出了一个异常&lt;br&gt; &lt;code&gt;Caused by: java.lang.ArrayIndexOutOfBoundsException: -32768&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.elietio.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.elietio.xyz/tags/Java/"/>
    
      <category term="Oracle" scheme="https://www.elietio.xyz/tags/Oracle/"/>
    
      <category term="异常" scheme="https://www.elietio.xyz/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>惨痛，笔记本机械硬盘突然跪了</title>
    <link href="https://www.elietio.xyz/2019/08/HDD.html"/>
    <id>https://www.elietio.xyz/2019/08/HDD.html</id>
    <published>2019-08-14T12:37:06.000Z</published>
    <updated>2019-08-28T13:54:15.903Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>感觉可能昨天都跪了，一直没注意，今天晚上才发现只剩一个固态C盘了，设备管理器也找不到机械硬盘，拔了重插也不转，心塞，明明这块1T日立也就2年多啊，通电也就6000h，我对日立还特有好感的说，买了好几块了，<br>想到好多东西也没备份就蛋疼</p> <a id="more"></a><p>从各个论坛收集的歌曲、图包、漫画，还有各种软件、文档、配置等等，虽然一部分网盘有备份，但是全部拖下来也得费不少功夫，而且有些东西完全想不起了。。。唯一庆幸的是博客的之前备份了一份到Git上，<a href="https://www.elietio.xyz/2019/04/hexo-themes-subtree.html">hexo和主题多设备同步</a>，o(︶︿︶)o 唉，以后还是多做备份吧。</p><p>新买的2T西数蓝盘，空空如也。</p><p><img src="/img/hdd/hdd.png" alt="hdd"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉可能昨天都跪了，一直没注意，今天晚上才发现只剩一个固态C盘了，设备管理器也找不到机械硬盘，拔了重插也不转，心塞，明明这块1T日立也就2年多啊，通电也就6000h，我对日立还特有好感的说，买了好几块了，&lt;br&gt;想到好多东西也没备份就蛋疼&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://www.elietio.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="硬盘" scheme="https://www.elietio.xyz/tags/%E7%A1%AC%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>Jedis Unexpected end of stream 异常</title>
    <link href="https://www.elietio.xyz/2019/05/Jedis-Unexpected-end-of-stream.html"/>
    <id>https://www.elietio.xyz/2019/05/Jedis-Unexpected-end-of-stream.html</id>
    <published>2019-05-12T11:37:06.000Z</published>
    <updated>2019-08-14T14:56:08.223Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这周末项目生产要上一个修数版本，其中一步是从Mysql中的临时表查找数据然后拼装key从Redis中查找对应的缓存数据并修改。然而升级过程中修数程序却抛出一个异常<code>Unexpected end of stream</code>意外停止。<br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis.clients.jedis.exceptions.JedisConnectionException: Unexpected end of stream.</span><br><span class="line">    at redis.clients.util.RedisInputStream.ensureFill(RedisInputStream.java:<span class="number">199</span>)</span><br><span class="line">    at redis.clients.util.RedisInputStream.readByte(RedisInputStream.java:<span class="number">40</span>)</span><br><span class="line">    at redis.clients.jedis.Protocol.process(Protocol.java:<span class="number">151</span>)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>需要修数的Redis采用的是codis搭建的集群，我们立即Telnet访问的端口，并在服务器使用Redis-cli直接连接，结果都未发现异常。于是立即去网上查找相关资料，网上都这样描述此异常。</p><p>客户端缓冲区异常<br>这个异常是客户端缓冲区异常，产生这个问题可能有三个原因：</p><ol><li><p>多个线程使用一个Jedis连接。</p></li><li><p>客户端缓冲区满了,Redis有三种客户端缓冲区：<br> 普通客户端缓冲区(normal)：用于接受普通的命令，例如get、set、mset、hgetall、zrange等。<br> slave客户端缓冲区(slave)：用于同步master节点的写命令，完成复制。<br> 发布订阅缓冲区(pubsub)：pubsub不是普通的命令，因此有单独的缓冲区。<br> Redis客户端缓冲区配置的格式是：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">client-output-buffer-limit</span> <span class="string">&lt;class&gt;</span> <span class="string">&lt;hard</span> <span class="string">limit&gt;</span> <span class="string">&lt;soft</span> <span class="string">limit&gt;</span> <span class="string">&lt;soft</span> <span class="string">seconds&gt;</span></span><br></pre></td></tr></table></figure><p>  class: 客户端类型：可选值为normal、slave和pubsub。<br>  hard limit: 如果客户端使用的输出缓冲区大于hard limit，客户端会被立即关闭，单位为秒。<br>  soft limit和soft seconds: 如果客户端使用的输出缓冲区超过了soft limit并且持续了soft limit秒，客户端会被立即关闭，单位为秒。</p></li><li><p>长时间闲置连接会被服务端主动断开，可以查询timeout配置的设置以及自身连接池配置确定是否需要做空闲检测。</p></li></ol><p>于是我们立即对配置进行了检查，并未发现有相关问题，timeout默认设置为0，客户端缓冲区临时修改为不限制也未见生效。</p><p>这下犯愁了，由于这个修数程序几乎没有日志，代码也不是我们编写，而是一位外地的同事提供的。只能一波人紧急分析代码，一波人继续查询错误日志，从异常的堆栈中我们发现异常是从执行redis的一个get方法抛出的，难道是get某个key的时候出现了异常？由于日志中没有打印具体的key信息，所以也不清楚具体情况，难道是某个key的体积过大，导致查询的时候超过了限制？于是立即使用bigkeys查询了一下Redis的大体积key，结果最大的也只有十几kb，很显然这也不是原因。大家正在一筹莫展，准备把程序加上详细的日志再具体分析，但是生产环境做紧急变更交付物是很困难的，之前我们已经在模拟环境同步生产数据测了好几轮，都未发现问题，为何生产就出现问题了呢？</p><p>继续看codis porxy的日志，发现了一个特殊的地方，客户端建立的连接每次都是经过60s后被断开，显示EOF错误，代表客户端客户端主动断开，于是我们立即查找相关配置，是否存在60s的配置，这时候运维同学提到了一件事，codis-porxy使用了nginx做负载均衡代理，nginx应该做了超时配置，于是我们翻看了nginx配置，果然存在一个60s的超时配置，而这时候我们再去翻看代码逻辑，发现了一个问题，首先程序使用jedis建立一个redis连接，然后从MySQL从查找临时表所有数据，然后修改redis缓存。而我们的临时表数据过于庞大，而且缺乏索引，所以查询这一步花费了很长时间，已经超过60s，等数据查询完毕，再执行redis操作，此时一直空闲的连接已经被nginx当作超时给断开了。为何之前模拟环境并未出现这个问题？应该是最近待修的数据又增加了很多，刚好超过60s，导致这个问题并未在模拟阶段发现。</p><p>于是我们在模拟环境复现该问题，并临时把nginx配置修改为600s，于是修数程序正常执行，没有异常，问题到此解决，于是生产同步操作，最终完成了升级。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这周末项目生产要上一个修数版本，其中一步是从Mysql中的临时表查找数据然后拼装key从Redis中查找对应的缓存数据并修改。然而升级过程中修数程序却抛出一个异常&lt;code&gt;Unexpected end of stream&lt;/code&gt;意外停止。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.elietio.xyz/categories/Java/"/>
    
    
      <category term="Redis" scheme="https://www.elietio.xyz/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Nintendo Switch更换内存卡</title>
    <link href="https://www.elietio.xyz/2019/04/replace-nintendoswitch-sd.html"/>
    <id>https://www.elietio.xyz/2019/04/replace-nintendoswitch-sd.html</id>
    <published>2019-04-30T14:39:27.000Z</published>
    <updated>2019-08-14T14:56:08.227Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>NS入手一年多了，一直拿张32G的microSD卡凑合着，因为入手游戏不多，又都是实体版，所以下载几个DLC也完全够了，不过考虑到实体版换卡还是麻烦，而且今年感兴趣的游戏也不少，有些不打算买实体了，所以一直想找个机会换张大一点的microSD卡，正好狗东200G闪迪卡活动195，价格还算OK，于是入手换之。<br><a id="more"></a> </p><h4 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h4><ul><li>Nintendo Switch</li><li>闪迪（SanDisk）200GB TF（MicroSD）存储卡 U1 C10 A1</li><li>高速读卡器一枚</li><li>PC</li></ul><h4 id="换卡流程："><a href="#换卡流程：" class="headerlink" title="换卡流程："></a>换卡流程：</h4><p><span id="inline-toc">1.</span> 取卡：NS 关机（Power Off），取出原来的 MicroSD 卡，并把MicroSD卡内容备份到PC<br><span id="inline-toc">2.</span> NS插入新卡（可能需要更新系统）<br><span id="inline-toc">3.</span> 格式化新卡（建议）：设置 - 系统设置 - 格式化选项 - 格式化 microSD 卡，格式化新卡。<br><span id="inline-toc">4.</span> 拷贝游戏文件：将新卡里的 Nintendo 文件夹删除，同时将旧卡备份到PC里的 Nintendo 文件夹复制到新卡里<br><span id="inline-toc">5.</span> 插入新卡：在关机的状态下插入新卡，然后开机，检查下载内容是否存在。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NS入手一年多了，一直拿张32G的microSD卡凑合着，因为入手游戏不多，又都是实体版，所以下载几个DLC也完全够了，不过考虑到实体版换卡还是麻烦，而且今年感兴趣的游戏也不少，有些不打算买实体了，所以一直想找个机会换张大一点的microSD卡，正好狗东200G闪迪卡活动195，价格还算OK，于是入手换之。&lt;br&gt;
    
    </summary>
    
      <category term="电子产品" scheme="https://www.elietio.xyz/categories/%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81/"/>
    
    
      <category term="电子产品" scheme="https://www.elietio.xyz/tags/%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81/"/>
    
      <category term="Nintendo Switch" scheme="https://www.elietio.xyz/tags/Nintendo-Switch/"/>
    
      <category term="NS" scheme="https://www.elietio.xyz/tags/NS/"/>
    
  </entry>
  
  <entry>
    <title>TCP的三次握手和四次挥手</title>
    <link href="https://www.elietio.xyz/2019/04/tcp-handshake-wave.html"/>
    <id>https://www.elietio.xyz/2019/04/tcp-handshake-wave.html</id>
    <published>2019-04-29T14:14:49.000Z</published>
    <updated>2019-08-14T14:56:08.227Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><code>TCP（Transmission Control Protoco）</code>，是一种基于字节流面向连接的传输层协议。数据的传输需要通信双方建立一个连接，TCP协议采用三次握手建立一个连接，采用 4 次挥手来关闭一个连接。每一个TCP连接都有两个端点，叫作套接字（socket），它的定义为IP地址+端口号拼接。</p><a id="more"></a><h3 id="TCP-IP协议概况"><a href="#TCP-IP协议概况" class="headerlink" title="TCP/IP协议概况"></a>TCP/IP协议概况</h3><ul><li>IPv4: 网际协议版本4(Internet Protocol version 4), 使用32位地址</li><li>IPv6: 网际协议版本6(Internet Protocol version 6), 使用128位地址，是IPv4替代品，通常把它两者称为”IP“</li><li>TCP: 传输控制协议(Transmission Control Protocol),TCP是一个<strong>面向连接</strong>的协议,为用户进程提供<strong>可靠</strong>的<strong>全双工字节流</strong>， TCP套接字是一种<strong>流套接字(stream sockte)</strong>, 关心<strong>确认</strong>, <strong>超时</strong>, <strong>重传</strong>等细节</li><li>UDP: 用户数据报协议(User Datagram Protocol), UDP是一个<strong>无连接</strong>协议,UDP套接字是一种<strong>数据报套接字(datagram socket)</strong></li><li>SCTP：流控制传输协议(Stream Control Transmission Protocol),SCTP是一个提供<strong>可靠全双工关联的面向连接的协议</strong></li><li>ICMP：网际控制消息协议(Internet Control Message Protocol),处理在路由器和主机之间流通的错误和控制消息</li><li>ICMPv6：网际控制消息协议版本6</li><li>IGMP: 网际组管理协议,用于多播</li><li>ARP: 地址解析协议(Address Resolution Protocol),把IPv4地址映射成一个硬件地址(如以太网地址)</li><li>RARP: 反地址解析协议(Reverse..), 将硬件地址映射成IPv4地址</li><li>BPF: BSD分组过滤器</li></ul><h3 id="TCP通信三部曲"><a href="#TCP通信三部曲" class="headerlink" title="TCP通信三部曲"></a>TCP通信三部曲</h3><ul><li>建立：三次握手</li><li>传输：超时重传、快速重传、流量控制、拥塞控制等</li><li>断开：四次挥手</li></ul><h4 id="TCP服务模型"><a href="#TCP服务模型" class="headerlink" title="TCP服务模型"></a>TCP服务模型</h4><p>一个 TCP 连接由一个 4 元组构成，分别是两个 IP 地址和两个端口号。一个 TCP 连接通常分为三个阶段：启动、数据传输、关闭。</p><p>当 TCP 接收到另一端的数据时，它会发送一个确认，但这个确认不会立即发送，一般会延迟一会儿。ACK 是累积的，一个确认字节号 N 的 ACK 表示所有直到 N 的字节（不包括 N）已经成功被接收了。这样的好处是如果一个 ACK 丢失，很可能后续的 ACK 就足以确认前面的报文段了。</p><p>一个完整的 TCP 连接是双向和对称的，数据可以在两个方向上平等地流动。给上层应用程序提供一种双工服务。一旦建立了一个连接，这个连接的一个方向上的每个 TCP 报文段都包含了相反方向上的报文段的一个 ACK。</p><p>序列号的作用是使得一个 TCP 接收端可丢弃重复的报文段，记录以杂乱次序到达的报文段。因为 TCP 使用 IP 来传输报文段，而 IP 不提供重复消除或者保证次序正确的功能。另一方面，TCP 是一个字节流协议，绝不会以杂乱的次序给上层程序发送数据。因此 TCP 接收端会被迫先保持大序列号的数据不交给应用程序，直到缺失的小序列号的报文段被填满。</p><h4 id="TCP报文头部"><a href="#TCP报文头部" class="headerlink" title="TCP报文头部"></a>TCP报文头部</h4><p><img src="/img/tcp-handshake-wave/TCP-Header.jpg" alt="TCP-Header"></p><ul><li>源端口和目的端口，各占2个字节；</li><li>序号，占4个字节，TCP连接中传送的字节流中的每个字节都按顺序编号；</li><li>确认号，占4个字节，是期望收到对方下一个报文的第一个数据字节的序号，即最后被成功接收的数据字节序列号加 1，这个字段只有在 ACK 位被启用的时候才有效；</li><li>数据偏移，占4位，它指出TCP报文的数据距离TCP报文段的起始处有多远；</li><li>保留，占6位，保留今后使用，但目前应都位0；</li><li>紧急URG，当URG=1，表明紧急指针字段有效。告诉系统此报文段中有紧急数据；</li><li>确认ACK，仅当ACK=1时，确认号字段才有效。TCP规定，在连接建立后所有报文的传输都必须把ACK置1；</li><li>推送PSH，当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这时候就将PSH=1；</li><li>复位RST，当RST=1，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立连接；</li><li>同步SYN，在连接建立时用来同步序号。当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1；</li><li>终止FIN，用来释放连接。当FIN=1，表明此报文的发送方的数据已经发送完毕，并且要求释放；</li><li>窗口，占2字节，指的是通知接收方，发送本报文你需要有多大的空间来接受；</li><li>检验和，占2字节，校验首部和数据这两部分；</li><li>紧急指针，占2字节，指出本报文段中的紧急数据的字节数；</li></ul><h4 id="TCP状态转换"><a href="#TCP状态转换" class="headerlink" title="TCP状态转换"></a>TCP状态转换</h4><table><thead><tr><th>状 态</th><th style="text-align:left">描 述</th></tr></thead><tbody><tr><td>CLOSED</td><td style="text-align:left">关闭状态，没有连接活动或正在进行</td></tr><tr><td>LISTEN</td><td style="text-align:left">监听状态，服务器正在等待连接进入</td></tr><tr><td>SYN_RCVD</td><td style="text-align:left">收到一个连接请求，尚未确认</td></tr><tr><td>SYN_SENT</td><td style="text-align:left">已经发出连接请求，等待确认</td></tr><tr><td>ESTABLISHED</td><td style="text-align:left">连接建立，正常数据传输状态</td></tr><tr><td>FIN_WAIT_1</td><td style="text-align:left">（主动关闭）已经发送关闭请求，等待确认</td></tr><tr><td>FIN_WAIT_2</td><td style="text-align:left">（主动关闭）收到对方关闭确认，等待对方关闭请求</td></tr><tr><td>TIMED_WAIT</td><td style="text-align:left">完成双向关闭，等待所有分组死掉</td></tr><tr><td>CLOSING</td><td style="text-align:left">双方同时尝试关闭，等待对方确认</td></tr><tr><td>CLOSE_WAIT</td><td style="text-align:left">（被动关闭）收到对方关闭请求，已经确认</td></tr><tr><td>LAST_ACK</td><td style="text-align:left">（被动关闭）等待最后一个关闭确认，并等待所有分组死掉</td></tr></tbody></table><p><img src="/img/tcp-handshake-wave/tcp-ip-handshark.png" alt="tcp-ip-handshark"></p><p>那么状态转换为什么要经历三次握手和四次挥手呢？</p><h4 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h4><ol><li>服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；</li><li>客户端先创建传输控制块TCB，然后向服务器发出连接请求报文，SYN=1，表示请求建立连接，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN_SENT（同步已发送状态）状态。TCP规定，SYN报文段（SYN=1的报文段）不能携带数据，但需要消耗掉一个序号。</li><li>服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN_RCVD（同步收到）状态。这个报文也不能携带数据，但是同样要消耗一个序号。</li><li>T客户端收到确认后，还要向服务器给出确认。确认报文的ACK=1，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</li><li>当服务器收到客户端的确认后也进入ESTABLISHED状态，三次握手结束，连接建立。</li></ol><p><img src="/img/tcp-handshake-wave/tcp-three-handshake.gif" alt="tcp-three-handshake"></p><p><strong>为什么需要第三次客户端ACK？</strong></p><div class="note info no-icon">            <p><code>三次握手</code>的目的是“<strong>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误</strong>。</p><p>例如网络出现抖动导致第一次SYN=1并没有及时到达服务端，从而客户端无法收到服务端的ACK，会触发客户端的重试。如果只有两次握手，第二次重发建立连接后，第一次延迟的请求刚好到达服务端，服务端会再次回包ACK，这样本来无效的请求又会建立新的连接。如果是三次握手，客户端收到服务端ACK并不会再次发出确认，这样就不会有新的连接建立。</p>          </div><h4 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h4><p>以客户端主动关闭为例，服务器端也可以主动关闭，方向与下面相反。</p><p><img src="/img/tcp-handshake-wave/tcp-four-wave.gif" alt="tcp-four-wave"></p><ol><li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN_WAIT_1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li><li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE_WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE_WAIT状态持续的时间。</li><li>客户端收到服务器的确认请求后，此时，客户端就进入FIN_WAIT_2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。</li><li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST_ACK（最后确认）状态，等待客户端的确认。</li><li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME_WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2*MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</li><li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态，撤销TCB结束TCP连接。</li></ol><p><strong>为什么主动关闭连接方最后需要等待2MSL？</strong></p><div class="note info no-icon">            <p> MSL（Maximum Segment Lifetime），报文最大生存时间。</p><ol><li>保证客户端发送的最后一个ACK报文能够到达服务器，如果因为网络原因导致服务器没收到，服务器会重新发送一次FIN+ack请求关闭连接，客户端就能收到这个重传的报文再次ACK，并且重启2MSL计时器。</li><li>防止类似与“三次握手”中提到了的“已经失效的连接请求报文段突然又传送到了服务端，因而产生错误”。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失，新的连接中不会出现旧连接的请求报文。</li><li>需要注意的是在TIME_WAIT状态 时两端的端口不能使用，客户端要等到2MSL时间结束才可继续使用。</li></ol>          </div><p><strong>为什么关闭连接需要四次挥手，比建立连接多一次呢？</strong></p><div class="note info no-icon">            <p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。<br>而关闭连接时，ACK和SYN是分开发送的，服务器收到对方的FIN报文时，仅仅表示客户端请求关闭但是还能接收数据，而且服务器的数据可能也没有发送完毕，所以服务器可以选择立即关闭FIN也可以再发送一部分数据然后再发送FIN报文给客户端关闭连接，由于服务器ACK和FIN分开发送，所以多了一次。</p>          </div><p><strong>如果通信双方同时请求连接或同时请求释放连接？</strong></p><div class="note info no-icon">            <p>这种情况虽然发生的可能性极小，但是是确实存在的，TCP也特意设计了相关机制，使得在这种情况下双方仅建立一条连接。</p><ul><li>双方同时请求连接的情况下，双方同时发出请求连接报文，并进入SYN_SENT状态；当收到对方的请求连接报文后，会再次发送请求连接报文，确认号为对方的SYN+1，并进入SYN_RCVD状态；当收到对方第二次发出的携带确认号的请求报文之后，会进入ESTABLISHED状态。 </li><li>双方同时请求释放连接也是同样的，双方同时发出连接释放报文，并进入FIN_WAIT_1状态；在收到对方的报文之后，发送确认报文，并进入CLOSING状态；在收到对方的确认报文后，进入TIME_WAIT状态，等待2MSL之后关闭连接。需要注意的是，这个时候虽然不用再次发送确认报文并确认对方收到，双方仍需等待2MSL之后再关闭连接，是为了防止“已失效的连接请求报文段”的影响。</li></ul>          </div><p><strong>TIME_WAIT状态</strong><br><div class="note warning no-icon">            <p>首先TIME_WAIT状态是执行主动关闭的那一端产生的，从上面2MSL中我们了解TIME_WAIT状态有两个存在的理由:</p><ol><li>可靠地实现TCP全双工连接的终止，即最后一次ACK如果丢失，可以重新发送FIN并再次ACK；</li><li>允许老的重复分节在网络中消逝，新的连接中不会出现旧连接的请求报文；</li></ol><p>在高并发短连接的TCP服务器上，当服务器处理完请求后立刻按照主动正常关闭连接。这个场景下，会出现大量socket处于TIME_WAIT状态。如果客户端的并发量持续很高，大量端口处于TIME_WAIT状态，无法正常使用，此时部分客户端就会显示连接不上，所以需要引起重视。</p>          </div></p><blockquote class="question"><br>参考📚：<br><i class="fa fa-hand-o-right" aria-hidden="true"></i><a href="https://blog.csdn.net/qzcsu/article/details/72861891" target="_blank" rel="noopener">TCP的三次握手与四次挥手</a><br></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;TCP（Transmission Control Protoco）&lt;/code&gt;，是一种基于字节流面向连接的传输层协议。数据的传输需要通信双方建立一个连接，TCP协议采用三次握手建立一个连接，采用 4 次挥手来关闭一个连接。每一个TCP连接都有两个端点，叫作套接字（socket），它的定义为IP地址+端口号拼接。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://www.elietio.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="TCP" scheme="https://www.elietio.xyz/tags/TCP/"/>
    
      <category term="网络" scheme="https://www.elietio.xyz/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Deprecated--自建Shadowsocks频繁被封？赶紧试试simple-obfs流量混淆</title>
    <link href="https://www.elietio.xyz/2019/04/shadowsocks-simple-obfs.html"/>
    <id>https://www.elietio.xyz/2019/04/shadowsocks-simple-obfs.html</id>
    <published>2019-04-28T14:14:49.000Z</published>
    <updated>2019-09-29T14:01:59.100Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="note info no-icon">            <p>🔊 update:推荐使用<a href="https://github.com/shadowsocks/v2ray-plugin" target="_blank" rel="noopener">v2ray-plugin</a>或者<a href="https://www.v2ray.com/" target="_blank" rel="noopener">v2ray</a><br>现在v2ray已经很完善了，无论是v2ray还是v2ray-plugin都支持tls+websocket+反代的方案，并且比simple-obfs要好，但是大体思路和下文是类似的。至于这两者的选择可以自行查阅了解，简单说其中一点就是v2ray配置较为复杂，但是社区文档相当完善，请耐心阅读，v2ray-plugin从名字上看就知道是基于shadowsocks的v2ray插件，配置文件简单些，了解了v2ray你也就了解了v2ray-plugin该如何使用，当然你可以同时部署不同plugin的ss-server和v2ray-server自由切换。想使用tls+websocket+反代这一套方案，你需要以下几点</p><ul><li>一个域名，付费免费看你自己口袋</li><li>为域名申请SSL证书，这个是tls必须的</li><li>基础的Linux操作和问题分析排查能力</li></ul>          </div><a id="more"></a><h3 id="👇🏻Deprecated"><a href="#👇🏻Deprecated" class="headerlink" title="👇🏻Deprecated"></a>👇🏻Deprecated</h3><p>年后用的一直挺稳的搬瓦工VPS搭建的Shadowsocks端口频繁被封，换了几次端口后感觉太麻烦，于是决定网上找找有没有好的思路，于是发现了<a href="https://github.com/shadowsocks/simple-obfs" target="_blank" rel="noopener">simple-obfs</a>,其思路是ss客户端对Shadowsocks流量混淆加密伪装成正常http或者https流量，服务端ss-server再对流量解密，以此躲过GFW的封杀。这个方案挺有意思，很多人又再此基础上进行了更多的伪装扩展，稳定性比之前纯Shadowsocks流加密更安全。不过原作者已经不再维护此项目而是转入了<a href="https://github.com/shadowsocks/v2ray-plugin" target="_blank" rel="noopener">v2ray-plugin</a>，由于本人使用的路由器SS固件似乎只支持simple-obfs插件模式，因此决定还是先试试simple-obfs的效果。<br>需要：</p><ul><li><a href="https://github.com/shadowsocks/shadowsocks-libev" target="_blank" rel="noopener">shadowsocks-libev</a></li><li><a href="https://github.com/shadowsocks/simple-obfs" target="_blank" rel="noopener">simple-obfs</a></li><li>VPS</li><li>Nginx</li><li>支持simple-obfs插件模式的ss客户端</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先安装shadowsock，使用<a href="shadowsocks-libev">shadowsocks-libev</a>,此项目支持插件模式使用<a href="https://github.com/shadowsocks/simple-obfs" target="_blank" rel="noopener">simple-obfs</a>，具体部署可以查看github主页。当然如果图省事也可以使用别人的一键安装脚本，例如<a href="https://github.com/teddysun/shadowsocks_install" target="_blank" rel="noopener">shadowsocks_install</a>,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh &lt;https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh&gt;</span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure><p>输入具体参数一路向下即可。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="ss-server："><a href="#ss-server：" class="headerlink" title="ss-server："></a>ss-server：</h4><p>最后生成的<code>/etc/shadowsocks-libev/config.json</code>配置如下格式。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;                            </span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:port,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"password"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"user"</span>:<span class="string">"nobody"</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"chacha20-ietf-poly1305"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"nameserver"</span>:<span class="string">"8.8.8.8"</span>,</span><br><span class="line">    <span class="attr">"mode"</span>:<span class="string">"tcp_and_udp"</span>,</span><br><span class="line">    <span class="attr">"plugin"</span>:<span class="string">"obfs-server"</span>,</span><br><span class="line">    <span class="attr">"plugin_opts"</span>:<span class="string">"obfs=http"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>method</code>:加密方式，推荐使用<code>AEAD</code>算法，比如<code>chacha20</code>，<code>aes-256-cfb</code> 和 <code>rc4-md5</code>已经不再安全,很容易识别。</li><li><code>plugin</code>：使用<code>obfs-server</code>插件 </li><li><code>plugin_opts</code>：混淆参数，obfs 有 <code>tls</code> 和 <code>http</code> 两种类型，根据你混淆的类型设置吧，和后面要保持一致</li></ul><h4 id="Nginx："><a href="#Nginx：" class="headerlink" title="Nginx："></a>Nginx：</h4><p>之前我们没启用 simple-obfs，ss-server 和ss-local直接进行数据交换，很容易别识别出来。现在ss-local通过simple-obfs伪装，ss-server 再拿掉这层伪装进行数据交换，这样可靠性就得到提升，我们的目的是让ss-local的流量更像正常的http流量，我们可以在VPS上80端口和443端口部署一个静态站点，并申请一个域名，再用Nginx再做一层反向代理，正常流量直接访问静态站点，而ss-local进行simple-obfs混淆域名的流量则代理到ss-server上去，这样从外表上看我们是去访问VPS上部署的网站，而实际却是和ss-local进行数据交互。</p><p>nginx配置参考如下，端口用80、443、8080等常用端口更符合http逻辑。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> your domain;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm index.php default.html default.htm default.php;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">root</span>  /home/wwwroot/...;</span><br><span class="line">      <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> =/ &#123;</span><br><span class="line">      <span class="attribute">root</span>  /home/wwwroot/...;</span><br><span class="line">      <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">      <span class="attribute">if</span> (<span class="variable">$http_upgrade</span> = <span class="string">"websocket"</span>) &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:ss-local port;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，服务端的部署到此差不多结束了，下面是客户端的一些配置</p><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows:"></a>Windows:</h4><p><a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">shadowsocks-windows</a>需要安装<a href="https://github.com/shadowsocks/simple-obfs/releases" target="_blank" rel="noopener">obfs-local</a>插件，并引入配置中</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">"server"</span>: <span class="string">"your domain"</span>,</span><br><span class="line">      <span class="attr">"server_port"</span>: <span class="number">80</span>,</span><br><span class="line">      <span class="attr">"password"</span>: <span class="string">"your password"</span>,</span><br><span class="line">      <span class="attr">"method"</span>: <span class="string">"chacha20-ietf-poly1305"</span>,</span><br><span class="line">      <span class="attr">"plugin"</span>: <span class="string">"obfs-local"</span>,</span><br><span class="line">      <span class="attr">"plugin_opts"</span>: <span class="string">"obfs=http;obfs-host=your domain"</span>,</span><br><span class="line">      <span class="attr">"plugin_args"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"remarks"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"timeout"</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Android："><a href="#Android：" class="headerlink" title="Android："></a>Android：</h4><p><a href="https://github.com/shadowsocks/simple-obfs-android/releases" target="_blank" rel="noopener">GitHub</a> | <a href="https://play.google.com/store/apps/details?id=com.github.shadowsocks.plugin.obfs_local" target="_blank" rel="noopener">Google Play</a></p><p>下载混淆插件，Shadowsocks Android 客户端配置文件下选取 <code>simple-obfs</code> 插件，配置项：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Obfuscation wrappper: http</span><br><span class="line">Obfuscation hostname: your domain</span><br></pre></td></tr></table></figure><h4 id="Padavan"><a href="#Padavan" class="headerlink" title="Padavan:"></a>Padavan:</h4><p>如果你的路由器和我一样使用Padavan，可以在ss配置页面设置如下</p><ul><li><code>插件名称</code>：<code>obfs-local</code></li><li><code>插件参数</code>：<code>obfs=http;obfs-host=your domain</code></li></ul><p>好了，到此整个从客户端到服务端的流量混淆加密完成，开始体验新的模式的吧，个人感觉还是挺稳的。</p><h3 id="shadowsocks-libev相关命令"><a href="#shadowsocks-libev相关命令" class="headerlink" title="shadowsocks-libev相关命令"></a>shadowsocks-libev相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动：/etc/init.d/shadowsocks-libev start</span><br><span class="line">停止：/etc/init.d/shadowsocks-libev stop</span><br><span class="line">重启：/etc/init.d/shadowsocks-libev restart</span><br><span class="line">状态：/etc/init.d/shadowsocks-libev status</span><br><span class="line">     systemctl status shadowsocks-libev</span><br></pre></td></tr></table></figure><h3 id="开启BBR加速"><a href="#开启BBR加速" class="headerlink" title="开启BBR加速"></a>开启BBR加速</h3><p> BBR 是Google  TCP拥塞控制算法，能最大化利用网络上瓶颈链路的带宽，降低网络链路上的 buffer 占用率，从而降低延迟，实际测试对网速提升很大。从 4.9 开始，Linux 内核已经用上了该算法。</p><h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><p>推荐使用<a href="https://teddysun.com/489.html" target="_blank" rel="noopener">一键脚本</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure><p>安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。</p><p>重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -r</span><br><span class="line">4.9.0-3-amd64</span><br></pre></td></tr></table></figure><p>查看内核版本，显示为最新版就表示 OK 了</p><h4 id="一些检测命令"><a href="#一些检测命令" class="headerlink" title="一些检测命令:"></a>一些检测命令:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl net.ipv4.tcp_congestion_control</span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl net.core.default_qdisc</span><br><span class="line">net.core.default_qdisc = fq</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ lsmod | grep bbr</span><br><span class="line">tcp_bbr                16384  28</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;
            &lt;p&gt;🔊 update:推荐使用&lt;a href=&quot;https://github.com/shadowsocks/v2ray-plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;v2ray-plugin&lt;/a&gt;或者&lt;a href=&quot;https://www.v2ray.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;v2ray&lt;/a&gt;&lt;br&gt;现在v2ray已经很完善了，无论是v2ray还是v2ray-plugin都支持tls+websocket+反代的方案，并且比simple-obfs要好，但是大体思路和下文是类似的。至于这两者的选择可以自行查阅了解，简单说其中一点就是v2ray配置较为复杂，但是社区文档相当完善，请耐心阅读，v2ray-plugin从名字上看就知道是基于shadowsocks的v2ray插件，配置文件简单些，了解了v2ray你也就了解了v2ray-plugin该如何使用，当然你可以同时部署不同plugin的ss-server和v2ray-server自由切换。想使用tls+websocket+反代这一套方案，你需要以下几点&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一个域名，付费免费看你自己口袋&lt;/li&gt;&lt;li&gt;为域名申请SSL证书，这个是tls必须的&lt;/li&gt;&lt;li&gt;基础的Linux操作和问题分析排查能力&lt;/li&gt;&lt;/ul&gt;
          &lt;/div&gt;
    
    </summary>
    
      <category term="技术" scheme="https://www.elietio.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="科学上网" scheme="https://www.elietio.xyz/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="Shadowsocks" scheme="https://www.elietio.xyz/tags/Shadowsocks/"/>
    
      <category term="simple-obfs" scheme="https://www.elietio.xyz/tags/simple-obfs/"/>
    
  </entry>
  
  <entry>
    <title>hexo和主题多设备同步</title>
    <link href="https://www.elietio.xyz/2019/04/hexo-themes-subtree.html"/>
    <id>https://www.elietio.xyz/2019/04/hexo-themes-subtree.html</id>
    <published>2019-04-12T11:39:27.000Z</published>
    <updated>2019-08-14T14:56:08.225Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>使用hexo可以生成静态网页部署到GitHub和VPS上搭建个人博客，但是hexo的部署都是在本地，如果换了一套环境如何也能够编辑发布自己的博客网站呢？<br><a id="more"></a> </p><h2 id="同步方案"><a href="#同步方案" class="headerlink" title="同步方案"></a>同步方案</h2><p>由于部署博客已经使用了github仓库托管网页代码，我们可以考虑使用这个来做hexo部署发布管理的版本控制，由于部署的网站默认使用了master分支，因此我们可以使用一个新的分支hexo或者新建一个仓库来管理。</p><p>下面步骤默认已经安装好了hexo并且已经成功部署网站，首先切换到hexo主目录，git init进行初始化，如果已经纳入git管理并且关联了远程仓库，可能需要删除重新关联。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git 初始化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看关联的远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote rm origin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置新的远程仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin git@github.com:Elietio/Elietio.github.io.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> master分支会作为网站部署分支，因此我们切换一个新的分支hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b hexo</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推送远程</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">""</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin hexo</span></span><br></pre></td></tr></table></figure><p>到这一步似乎已经大功告成了，然而，如果你使用了第三方主题，并且是直接git clone，你会发现一个问题，上传的themes/下面主题是空目录，因为git无法直接管理这样的嵌套模块，那么该怎么做呢？最暴力，直接取消主题模块的git管理，但是这样后续主题模块的更新就是一个问题了，所以不推荐，好在我们可以通过git的submodule或subtree来实现，对于git clone安装的其它主题和插件都可以按照这个思路。</p><h2 id="git-submodule-vs-git-subtree"><a href="#git-submodule-vs-git-subtree" class="headerlink" title="git submodule vs git subtree"></a>git submodule vs git subtree</h2><p>简单来说，submodule 和 subtree 最大的区别是，submodule 保存的是子仓库的 link，而 subtree 保存的是子仓库的 copy。</p><h3 id="git-submodule"><a href="#git-submodule" class="headerlink" title="git submodule"></a>git submodule</h3><p>child 目录被当做一个独立的 Git 仓库，所有的 Git 命令都可以在 child 目录以及上层项目下独立工作。尽管 child 是子目录，当你不在 child 目录时并不记录它的内容。而当你在那个子目录里修改并提交时，子项目会通知那里的 HEAD 已经发生变更并记录你当前正在工作的那个提交。而此时上层项目会显示 child 目录下的改动，将它记录成来自那个仓库的一个特殊的提交。</p><p>若他人要克隆该项目，会发现 child 目录为空。这时需要执行 git submodule init 来初始化你的本地配置文件，以及 git submodule update 拉取数据并切换到合适的提交。而后每次从主项目拉取子模块的变更时，由于主项目只更新了子模块提交的引用而没有更新子模块目录下的代码，必须执行 git submodule update 来更新子模块代码。</p><h3 id="git-subtree"><a href="#git-subtree" class="headerlink" title="git subtree"></a>git subtree</h3><p>不同于 git submodule，此时的 child 仅仅是含有相关代码的普通目录，而不是一个独立的 Git 仓库。因此当在 child 进行修改时，上层项目会立刻记录其改动，而不是像之前那样先在子项目中提交才能进行记录。克隆上层仓库时 child 目录也不再为空。但同时，child 也不能再执行独立的 Git 命令，只有 git subtree 相关的操作。</p><p>进行操作前请先备份已有的next主题目录，根据不同情况操作中可能需要删除并且重新clone下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">首先在自己的github上fork一份next源码</span><br><span class="line">git@github.com:Elietio/hexo-theme-next.git     </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为hexo添加远程仓库 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git remote add -f &lt;子仓库名&gt; &lt;子仓库地址&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add -f next git@github.com:Elietio/hexo-theme-next.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加subtree</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git subtree add --prefix=&lt;子目录名&gt; &lt;子仓库名&gt; &lt;分支&gt; squash意思是把subtree的改动合并成一次commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git subtree add --prefix=themes/next next master --squash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新子项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch next master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git subtree pull --prefix=themes/next next master --squash</span></span><br><span class="line">整个项目的pull、push同样会对子项目起作用</span><br><span class="line"></span><br><span class="line">而对next子项目进行pull、push操作需要使用subtree</span><br><span class="line"><span class="meta">#</span><span class="bash"> git subtree push --prefix=&lt;子目录名&gt; &lt;远程分支名&gt; 分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git subtree push --prefix=themes/next next master  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> git subtree pull --prefix=&lt;子目录名&gt; &lt;远程分支名&gt; 分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git subtree pull --prefix=themes/yilia yilia master --squash</span></span><br></pre></td></tr></table></figure><h2 id="其它设备同步"><a href="#其它设备同步" class="headerlink" title="其它设备同步"></a>其它设备同步</h2><p>上面操作已经把hexo的源目录同步到Git，因此我们只需要clone，并且安装node.js和hexo环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> -b hexo git@github.com:Elietio/Elietio.github.io.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo(npm install hexo-cli -g)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装部署相关配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用hexo可以生成静态网页部署到GitHub和VPS上搭建个人博客，但是hexo的部署都是在本地，如果换了一套环境如何也能够编辑发布自己的博客网站呢？&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://www.elietio.xyz/categories/hexo/"/>
    
    
      <category term="linux" scheme="https://www.elietio.xyz/tags/linux/"/>
    
      <category term="hexo" scheme="https://www.elietio.xyz/tags/hexo/"/>
    
      <category term="git" scheme="https://www.elietio.xyz/tags/git/"/>
    
      <category term="subtree" scheme="https://www.elietio.xyz/tags/subtree/"/>
    
  </entry>
  
  <entry>
    <title>linux的awk命令</title>
    <link href="https://www.elietio.xyz/2019/04/2019-04-10-shell-awk.html"/>
    <id>https://www.elietio.xyz/2019/04/2019-04-10-shell-awk.html</id>
    <published>2019-04-10T11:39:27.000Z</published>
    <updated>2019-08-14T14:56:08.223Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。<br><a id="more"></a><br>awk 命令和 sed 命令结构相同，通常情况下，awk 将每个输入行解释为一条记录而每一行中的内容（由空格或者制表符分隔）解释为每一个字段，一个或者多个连续空格或者制表符看做定界符。awk 中 <code>$0</code> 代表整个记录。</p><h2 id="linux的awk命令"><a href="#linux的awk命令" class="headerlink" title="linux的awk命令"></a>linux的awk命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk ' /MA/ &#123; print $1 &#125;' list</span><br></pre></td></tr></table></figure><p>解释：打印包含 MA 的行中的第一个单词。再举一个具体的例子，比如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 'this is one world\nthat is another world' | awk '&#123;print $1&#125;'</span><br></pre></td></tr></table></figure><p>那么输出就是 awk 处理之后的每一行第一个字符也就是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this</span><br><span class="line">that</span><br></pre></td></tr></table></figure><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><p>awk 命令的基本格式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk [options] <span class="string">'script'</span> file</span><br></pre></td></tr></table></figure><p><code>options</code> 这个表示一些可选的参数选项，<code>script</code> 表示 awk 的可执行脚本代码（一般被<code>{}</code> 花括号包围），这个是必须的。<code>file</code> 这个表示 awk 需要处理的文件，注意需要是纯文本文件（意味着 awk 能够处理）。</p><h3 id="awk-自定义分隔符"><a href="#awk-自定义分隔符" class="headerlink" title="awk 自定义分隔符"></a>awk 自定义分隔符</h3><p>之前提到的awk 默认的分割符为<strong>空格和制表符</strong>，awk 会根据这个默认的分隔符将每一行分为若干字段，依次用 <code>$1</code>, <code>$2</code>,<code>$3</code> 来表示，可以使用 <code>-F</code> 参数来指定分隔符</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">':'</span> <span class="string">'&#123;print $1&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>解释：使用 <code>-F</code> 来改变分隔符为 <code>:</code> ，比如上面的命令将 /etc/passwd 文件中的每一行用冒号 <code>:</code> 分割成多个字段，然后用 print 将第 1 列字段的内容打印输出</p><p>在 awk 中同时指定多个分隔符，比如现在有这样一个文件 some.log 文件内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Grape(100g)1980</span><br><span class="line">raisins(500g)1990</span><br><span class="line">plum(240g)1997</span><br><span class="line">apricot(180g)2005</span><br><span class="line">nectarine(200g)2008</span><br></pre></td></tr></table></figure><p>现在我们想将上面的 some.log 文件中按照 “水果名称（重量）年份” 来进行分割</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ awk -F <span class="string">'[()]'</span> <span class="string">'&#123;print $1, $2, $3&#125;'</span> some.log</span><br><span class="line">Grape 100g 1980</span><br><span class="line">raisins 500g 1990</span><br><span class="line">plum 240g 1997</span><br><span class="line">apricot 180g 2005</span><br><span class="line">nectarine 200g 2008</span><br></pre></td></tr></table></figure><p>在 <code>-F</code> 参数中使用一对方括号来指定多个分隔符，awk 处理 some.log 文件时就会使用 “(“ 或者 “)” 来对文件的每一行进行分割。</p><h3 id="awk-内置变量的使用"><a href="#awk-内置变量的使用" class="headerlink" title="awk 内置变量的使用"></a>awk 内置变量的使用</h3><p>awk 除了 <code>$</code> 和数字表示字段还有一些其他的内置变量：</p><ul><li>$0 这个表示文本处理时的当前行，$1 表示文本行被分隔后的第 1 个字段列，$2 表示文本行被分割后的第 2 个字段列，$3 表示文本行被分割后的第 3 个字段列，$n 表示文本行被分割后的第 n 个字段列</li><li>NR 表示文件中的行号，表示当前是第几行</li><li>NF 表示文件中的当前行被分割的列数，可以理解为 MySQL 数据表里面每一条记录有多少个字段，所以 $NF 就表示最后一个字段，$(NF-1) 就表示倒数第二个字段</li><li>FS 表示 awk 的输入分隔符，默认分隔符为空格和制表符，可以对其进行自定义设置</li><li>OFS 表示 awk 的输出分隔符，默认为空格，也可以对其进行自定义设置</li><li>FILENAME 表示当前文件的文件名称，如果同时处理多个文件，它也表示当前文件名称</li><li>RS 行分隔符，用于分割行，默认为换行符</li><li>ORS 输出记录的分隔符，默认为换行符</li></ul><p>比如我们有这么一个文本文件 fruit.txt 内容如下，用它来演示如何使用 awk 命令工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">peach    100   Mar  1997   China</span><br><span class="line">Lemon    150   Jan  1986   America</span><br><span class="line">Pear     240   Mar  1990   Janpan</span><br><span class="line">avocado  120   Feb  2008   china</span><br><span class="line"></span><br><span class="line">awk <span class="string">'&#123;print $0&#125;'</span> fruit.txt   <span class="comment"># 表示打印输出文件的每一整行的内容</span></span><br><span class="line">awk <span class="string">'&#123;print $1&#125;'</span> fruit.txt   <span class="comment"># 表示打印输出文件的每一行的第 1 列内容</span></span><br><span class="line">awk <span class="string">'&#123;print $1, $2&#125;'</span> fruit.txt</span><br></pre></td></tr></table></figure><p>文件的每一行的每一列的内容除了可以用 print 命令打印输出以外，还可以对其进行赋值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;$2 = "***"; print $0&#125;'</span> fruit.txt</span><br></pre></td></tr></table></figure><p>上面的例子就是表示通过对 <code>$2</code> 变量进行重新赋值，来隐藏每一行的第 2 列内容，并且用星号 <code>*</code> 来代替其输出</p><p>在参数列表中加入一些字符串或者转义字符之类的东东</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print $1 "\t" $2 "\t" $3&#125;'</span> fruit.txt</span><br></pre></td></tr></table></figure><p>像上面这样，你可以在 print 的参数列表中加入一些字符串或者转义字符之类的东东，让输出的内容格式更漂亮，但一定要记住要使用双引号。</p><p>awk 内置 NR 变量表示每一行的行号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print NR "\t" $0&#125;'</span> fruit.txt</span><br><span class="line"></span><br><span class="line">1   peach    100   Mar  1997   China</span><br><span class="line">2   Lemon    150   Jan  1986   America</span><br><span class="line">3   Pear     240   Mar  1990   Janpan</span><br><span class="line">4   avocado  120   Feb  2008   china</span><br></pre></td></tr></table></figure><p>awk 内置 <code>NF</code> 变量表示每一行的列数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print NF "\t" $0&#125;'</span> fruit.txt</span><br><span class="line"></span><br><span class="line">5   peach    100   Mar  1997   China</span><br><span class="line">5   Lemon    150   Jan  1986   America</span><br><span class="line">5   Pear     240   Mar  1990   Janpan</span><br><span class="line">5   avocado  120   Feb  2008   china</span><br></pre></td></tr></table></figure><p>awk 中 <code>$NF</code> 变量的使用</p><pre><code>awk &apos;{print $NF}&apos; fruit.txt</code></pre><p>上面这个 <code>$NF</code> 就表示每一行的最后一列，因为 <code>NF</code> 表示一行的总列数，在这个文件里表示有 5 列，然后在其前面加上 <code>$</code> 符号，就变成了 <code>$5</code> ，表示第 5 列</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print $(NF - 1)&#125;'</span> fruit.txt</span><br><span class="line"></span><br><span class="line">1997</span><br><span class="line">1986</span><br><span class="line">1990</span><br><span class="line">2008</span><br></pre></td></tr></table></figure><p>上面 <code>$(NF-1)</code> 表示倒数第 2 列， <code>$(NF-2)</code> 表示倒数第 3 列，依次类推。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'NR % 6'</span>        <span class="comment"># 打印出了 6 倍数行之外的其他行</span></span><br><span class="line">awk <span class="string">'NR &gt; 5'</span>        <span class="comment"># 打印第 5 行之后内容，类似 `tail -n +6` 或者 `sed '1,5d'`</span></span><br><span class="line">awk <span class="string">'NF &gt;= 6'</span>       <span class="comment"># 打印大于等于 6 列的行</span></span><br><span class="line">awk <span class="string">'/foo/ &amp;&amp; /bar/'</span>    <span class="comment"># 打印匹配 `/foo/` 和 `/bar/` 的行</span></span><br><span class="line">awk <span class="string">'/foo/ &amp;&amp; !/bar/'</span>   <span class="comment"># 打印包含 `/foo/` 不包含 `/bar/` 的行</span></span><br><span class="line">awk <span class="string">'/foo/ || /bar/'</span>    <span class="comment"># 或</span></span><br><span class="line">awk <span class="string">'/foo/,/bar/'</span>       <span class="comment"># 打印从匹配 `/foo/` 开始的行到 `/bar/` 的行，包含这两行</span></span><br></pre></td></tr></table></figure><h3 id="awk-内置函数"><a href="#awk-内置函数" class="headerlink" title="awk 内置函数"></a>awk 内置函数</h3><p>awk 还提供了一些内置函数，比如</p><ul><li><code>toupper()</code> 用于将字符转为大写</li><li><code>tolower()</code> 将字符转为小写</li><li><code>length()</code> 长度</li><li><code>substr()</code> 子字符串</li><li><code>sin()</code> 正弦</li><li><code>cos()</code> 余弦</li><li><code>sqrt()</code> 平方根</li><li><code>rand()</code> 随机数</li></ul><p>更多的方法可以参考 <code>man awk</code></p><h3 id="awk-同时处理多个文件"><a href="#awk-同时处理多个文件" class="headerlink" title="awk 同时处理多个文件"></a>awk 同时处理多个文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print FILENAME "\t" $0&#125;'</span> demo1.txt demo2.txt</span><br></pre></td></tr></table></figure><p>当你使用 awk 同时处理多个文件的时候，它会将多个文件合并处理，变量<code>FILENAME</code> 就表示当前文本行所在的文件名称。</p><h3 id="BEGIN-关键字的使用"><a href="#BEGIN-关键字的使用" class="headerlink" title="BEGIN 关键字的使用"></a>BEGIN 关键字的使用</h3><p>在脚本代码段前面使用 BEGIN 关键字时，它会在开始读取一个文件之前，运行一次 <code>BEGIN</code>关键字后面的脚本代码段， BEGIN 后面的脚本代码段只会执行一次，执行完之后 awk 程序就会退出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN &#123;print "Start read file"&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>awk 脚本中可以用多个花括号来执行多个脚本代码，就像下面这样</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN &#123;print "Start read file"&#125; &#123;print $0&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="END-关键字使用方法"><a href="#END-关键字使用方法" class="headerlink" title="END 关键字使用方法"></a>END 关键字使用方法</h3><p>awk 的 END 指令和 BEGIN 恰好相反，在 awk 读取并且处理完文件的所有内容行之后，才会执行<code>END</code>后面的脚本代码段</p><pre><code>awk &apos;END {print &quot;End file&quot;}&apos; /etc/passwdawk &apos;BEGIN {print &quot;Start read file&quot;} {print $0} END {print &quot;End file&quot;}&apos; /etc/passwd</code></pre><h3 id="在-awk-中使用变量"><a href="#在-awk-中使用变量" class="headerlink" title="在 awk 中使用变量"></a>在 awk 中使用变量</h3><p>可以在 awk 脚本中声明和使用变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;msg="hello world"; print msg&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>awk 声明的变量可以在任何多个花括号脚本中使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'BEGIN &#123;msg="hello world"&#125; &#123;print msg&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>在 awk 中使用数学运算，在 awk 中，像其他编程语言一样，它也支持一些基本的数学运算操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;a = 12; b = 24; print a + b&#125;'</span> company.txt</span><br></pre></td></tr></table></figure><p>上面这段脚本表示，先声明两个变量 a = 12 和 b = 24，然后用 print 打印出 a 加上 b 的结果。</p><p>请记住 awk 是针对文件的每一行来执行一次单引号 里面的脚本代码，每读取到一行就会执行一次，文件里面有多少行就会执行多少次，但 BEGIN 和 END 关键字后脚本代码除外，如果被处理的文件中什么都没有，那 awk 就一次都不会执行。</p><p>awk 还支持其他的数学运算符</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ 加法运算符</span><br><span class="line">- 减法运算符</span><br><span class="line">* 乘法运算符</span><br><span class="line">/ 除法运算符</span><br><span class="line">% 取余运算符</span><br></pre></td></tr></table></figure><p>在 awk 中使用条件判断</p><p>比如有一个文件 company.txt 内容如下</p><pre><code>yahoo   100 4500google  150 7500apple   180 8000twitter 120 5000</code></pre><p>如果要判断文件的第 3 列数据，也就是平均工资小于 5500 的公司，然后将其打印输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'$3 &lt; 5500 &#123;print $0&#125;'</span> company.txt</span><br></pre></td></tr></table></figure><p>上面的命令结果就是平均工资小于 5500 的公司名单，<code>$3 &lt; 5500</code> 表示当第 3 列字段的内容小于 5500 的时候才会执行后面的 {print $0} 代码块</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'$1 == "yahoo" &#123;print $0&#125;'</span> company.txt</span><br></pre></td></tr></table></figure><p>awk 还有一些其他的条件操作符如下</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">&lt;</td><td style="text-align:left">小于</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">小于或等于</td></tr><tr><td style="text-align:left">==</td><td style="text-align:left">等于</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:left">不等于</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">大于</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">大于或等于</td></tr><tr><td style="text-align:left">~</td><td style="text-align:left">匹配正则表达式</td></tr><tr><td style="text-align:left">!~</td><td style="text-align:left">不匹配正则表达式</td></tr></tbody></table><p>使用 if 指令判断来实现上面同样的效果</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;if ($3 &lt; 5500) print $0&#125;'</span> company.txt</span><br></pre></td></tr></table></figure><p>上面表示如果第 3 列字段小于 5500 的时候就会执行后面的 print $0</p><h3 id="在-awk-中使用正则表达式"><a href="#在-awk-中使用正则表达式" class="headerlink" title="在 awk 中使用正则表达式"></a>在 awk 中使用正则表达式</h3><p>比如现在我们有这么一个文件 poetry.txt 内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This above all: to thine self be <span class="literal">true</span></span><br><span class="line">There is nothing either good or bad, but thinking makes it so</span><br><span class="line">There’s a special providence <span class="keyword">in</span> the fall of a sparrow</span><br><span class="line">No matter how dark long, may eventually <span class="keyword">in</span> the day arrival</span><br></pre></td></tr></table></figure><p>使用正则表达式匹配字符串 “There” ，将包含这个字符串的行打印并输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'/There/&#123;print $0&#125;'</span> poetry.txt</span><br><span class="line"></span><br><span class="line">There is nothing either good or bad, but thinking makes it so</span><br><span class="line">There’s a special providence <span class="keyword">in</span> the fall of a sparrow</span><br></pre></td></tr></table></figure><p>使用正则表达式配一个包含字母 t 和字母 e ，并且 t 和 e 中间只能有任意单个字符的行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'/t.e/&#123;print $0&#125;'</span> poetry.txt</span><br><span class="line"></span><br><span class="line">There is nothing either good or bad, but thinking makes it so</span><br><span class="line">There’s a special providence <span class="keyword">in</span> the fall of a sparrow</span><br><span class="line">No matter how dark long, may eventually <span class="keyword">in</span> the day arrival</span><br></pre></td></tr></table></figure><p>如果只想匹配单纯的字符串 “t.e”， 那正则表达式就是这样的 /t.e/ ，用反斜杠来转义 . 符号 因为 . 在正则表达式里面表示任意单个字符。</p><p>使用正则表达式来匹配所有以 “The” 字符串开头的行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'/^The/&#123;print $0&#125;'</span> poetry.txt</span><br></pre></td></tr></table></figure><p>在正则表达式中 <code>^</code>表示以某某字符或者字符串开头。</p><p>使用正则表达式来匹配所有以 “true” 字符串结尾的行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'/true$/&#123;print $0&#125;'</span> poetry.txt</span><br></pre></td></tr></table></figure><p>在正则表达式中 $ 表示以某某字符或者字符串结尾。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'/m[a]t/&#123;print $0&#125;'</span> poetry.txt</span><br><span class="line"></span><br><span class="line">No matter how dark long, may eventually <span class="keyword">in</span> the day arrival</span><br></pre></td></tr></table></figure><p>上面这个正则表达式 <code>/m[a]t/</code> 表示匹配包含字符 m ，然后接着后面包含中间方括号中表示的单个字符 a ，最后包含字符 t 的行，输出结果中只有单词 “matter” 符合这个正则表达式的匹配。因为正则表达式 [a] 方括号中表示匹配里面的任意单个字符。</p><p>继续上面的一个新例子如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'/^Th[ie]/&#123;print $0&#125;'</span> poetry.txt</span><br></pre></td></tr></table></figure><p>这个例子中的正则表达式 /^Th[ie]/ 表示匹配以字符串 “Thi” 或者 “The” 开头的行，正则表达式方括号中表示匹配其中的任意单个字符。</p><p>再继续上面的新的用法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'/s[a-z]/&#123;print $0&#125;'</span> poetry.txt</span><br></pre></td></tr></table></figure><p>正则表达式 <code>/s[a-z]/</code> 表示匹配包含字符 s 然后后面跟着任意 a 到 z 之间的单个字符的字符串，比如 “se”, “so”, “sp” 等等。</p><p>正则表达式 [] 方括号中还有一些其他用法比如下面这些</p><pre><code>[a-zA-Z]  表示匹配小写的 a 到 z 之间的单个字符，或者大写的 A 到 Z 之间的单个字符[^a-z]    符号 `^` 在方括号里面表示取反，也就是非的意思，表示匹配任何非 a 到 z 之间的单个字符</code></pre><p>正则表达式中的星号 <code>*</code> 和加号 <code>+</code> 的使用方法，<code>*</code> 表示匹配星号前字符串 0 次或者多次，<code>+</code> 和星号原理差不多，只是加号表示任意 1 个或者 1 个以上，也就是必须至少要出现一次。</p><p>正则表达式问号 ? 的使用方法，正则中的问号 <code>?</code> 表示它前面的字符只能出现 0 次 或者 1 次。</p><p>正则表达式中的 {} 花括号用法，花括号 {} 表示规定它前面的字符必须出现的次数，像这个 /go{2}d/ 就表示只匹配字符串 “good”，也就是中间的字母 “o” 必须要出现 2 次。</p><p>正则表达式中的花括号还有一些其他的用法如下</p><pre><code>/go{2,10}d/   表示字母 &quot;o&quot; 只能可以出现 2 次，3 次，4 次，5 次，6 次 ... 一直到 10 次/go{2,}d/     表示字母 &quot;o&quot; 必须至少出现 2 次或着 2 次以上</code></pre><p>正则表达式中的圆括号表示将多个字符当成一个完整的对象来看待。比如 /th(in){1}king/ 就表示其中字符串 “in” 必须出现 1 次。而如果不加圆括号就变成了 /thin{1}king/ 这个就表示其中字符 “n” 必须出现 1 次。</p><h3 id="一些组合使用"><a href="#一些组合使用" class="headerlink" title="一些组合使用"></a>一些组合使用</h3><p>使用 awk 过滤 history 输出，找到最常用的命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> | awk <span class="string">'&#123;a[$2]++&#125;END&#123;for(i in a)&#123;print a[i] " " i&#125;&#125;'</span> | sort -rn | head</span><br></pre></td></tr></table></figure></p><p>过滤文件中重复行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'!x[$0]++'</span> &lt;file&gt;</span><br></pre></td></tr></table></figure></p><p>将一行长度超过 72 字符的行打印<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'length&gt;72'</span> file</span><br></pre></td></tr></table></figure></p><p>查看最近哪些用户使用系统<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">last | grep -v <span class="string">"^$"</span> | awk <span class="string">'&#123; print $1 &#125;'</span> | sort -nr | uniq -c</span><br></pre></td></tr></table></figure></p><p>假设有一个文本，每一行都是一个 int 数值，想要计算这个文件每一行的和，可以使用<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;s+=$1&#125; ENG &#123;printf "%.0f", s&#125;'</span> /path/to/file</span><br></pre></td></tr></table></figure></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><blockquote><ul><li><a href="http://www.ruanyifeng.com/blog/2018/11/awk.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/11/awk.html</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.elietio.xyz/categories/linux/"/>
    
      <category term="shell" scheme="https://www.elietio.xyz/categories/linux/shell/"/>
    
    
      <category term="linux" scheme="https://www.elietio.xyz/tags/linux/"/>
    
      <category term="shell" scheme="https://www.elietio.xyz/tags/shell/"/>
    
      <category term="awk" scheme="https://www.elietio.xyz/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>对于含有泛型的类,如何在类中获取泛型的class对象？</title>
    <link href="https://www.elietio.xyz/2018/05/java-generics.html"/>
    <id>https://www.elietio.xyz/2018/05/java-generics.html</id>
    <published>2018-05-04T16:00:00.000Z</published>
    <updated>2019-08-14T15:41:36.892Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>对于含有泛型的类,如何在类中获取泛型的class对象？</p><p>如果子类继承该类的时候传递了泛型，所以编译期该类的泛型其实已经指定了。那么在类中定义一个Class对象，然后通过构造代码块，this指向的是当前调用的子类</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 获取当前类上的泛型(this指向当前子类)</span></span><br><span class="line">   ParameterizedType type =(ParameterizedType)<span class="keyword">this</span>.getClass().getGenericSuperclass();</span><br><span class="line">   clazz = (Class&lt;T&gt;) type.getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>对于没有继承该类的子类，可以采用new的时候有参构造函数传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"><span class="comment">//通过构造函数指定元素类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">classname</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>();</span><br><span class="line">      <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于含有泛型的类,如何在类中获取泛型的class对象？&lt;/p&gt;
&lt;p&gt;如果子类继承该类的时候传递了泛型，所以编译期该类的泛型其实已经指定了。那么在类中定义一个Class对象，然后通过构造代码块，this指向的是当前调用的子类&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.elietio.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.elietio.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>HashMap探究以及ConcurrentHashMap</title>
    <link href="https://www.elietio.xyz/2017/11/hashmap-concurrenthashmap.html"/>
    <id>https://www.elietio.xyz/2017/11/hashmap-concurrenthashmap.html</id>
    <published>2017-11-02T07:48:18.000Z</published>
    <updated>2019-08-14T14:56:08.224Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>HashMap是一种结构非常巧妙的集合容器。HashMap是存储键值对的结构，key和value一一对应，key必须保证唯一，存储无序，线程不安全，这是它的一些基本特点。在java中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，hashmap也不例外。<br><a id="more"></a></p><p>Hashmap实际上是一个数组和链表的结合体（在数据结构中，一般称之为“链表散列“），如下图所示 <img src="http://dl2.iteye.com/upload/attachment/0017/7479/3f05dd61-955e-3eb2-bf8e-31da8a361148.jpg" alt="Hashmap构成"></p><p>当新建一个HashMap的时候，会初始化一个数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//The table, resized as necessary. Length MUST Always be a power of two. </span></span><br><span class="line"><span class="comment">//FIXME 这里需要注意这句话，至于原因后面会讲到  </span></span><br><span class="line"><span class="keyword">transient</span> Entry[ ] table;  </span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;  </span><br><span class="line">        <span class="keyword">final</span> K key;  </span><br><span class="line">        V value;  </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;  </span><br><span class="line">        Entry&lt;K,V&gt; next;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Entry&lt;K,V&gt;就是存储在数组中的元素，它包含了一个指向下个元素的引用，构成了一个单向链表。 当我们往hashmap中put元素的时候，先根据key的hash值得到这个元素在数组中的位置（即下标），然后就可以把这个元素放到对应的位置中了。如果这个元素所在的位子上已经存放有其他元素了，根据equals方法进行比较，有相等的则覆盖掉，没有相当的那么将以链表的形式存放，新加入的放在链头，最先加入的放在链尾。从hashmap中get元素时，首先计算key的hashcode，找到数组中对应位置的某一元素，然后通过key的equals方法在对应位置的链表中找到需要的元素。</p><h3 id="1-Hash算法"><a href="#1-Hash算法" class="headerlink" title="1.Hash算法"></a>1.Hash算法</h3><p>我们可以看到在hashmap中要找到某个元素，需要根据key的hash值来求得对应数组中的位置。如何计算这个位置就是hash算法。前面说过hashmap的数据结构是数组和链表的结合，所以如果hashmap里面的元素位置尽量的分布均匀些，尽量使得每个位置上的元素数量只有一个，那么查找的时候无需遍历链表，速度就会很快。Java中是这样实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先算得key得hashcode值，然后跟数组的长度-1做一次“与”运算（&amp;）。HashMap默认的初始化数组长度是16，并且无论创建多大的HashMap，它的数组长度都是2的n次方，这是为何呢？ 看下图，左边两组是数组长度为16（2的4次方），右边两组是数组长度为15。两组的hashcode均为8和9，但是很明显，当它们和1110“与”的时候，产生了相同的结果，也就是说它们会定位到数组中的同一个位置上去，这就产生了碰撞，8和9会被放到同一个链表上，那么查询的时候就需要遍历这个链表，得到8或者9，这样就降低了查询的效率。同时，我们也可以发现，当数组长度为15的时候，hashcode的值会与14（1110）进行“与”，那么最后一位永远是0，而0001，0011，0101，1001，1011，0111，1101这几个位置永远都不能存放元素了，空间浪费相当大，更糟的是这种情况中，数组可以使用的位置比数组长度小了很多，这意味着进一步增加了碰撞的几率，减慢了查询的效率！ <img src="http://dl2.iteye.com/upload/attachment/0017/7481/4b3732d6-fb5f-369b-b50d-e8b8325c69d4.jpg" alt=""> </p><p>因此，当数组的长度为2的n次方的时候，能够尽量保证元素分布均匀。那么我们想要存放1000个元素，new HashMap(1000),java会自动将HashMap的数组长度设为1024，这样到底合适吗？实际上并不合适，HashMap中还有一个装载因子LoadFactor。</p><h3 id="HashMap的扩容"><a href="#HashMap的扩容" class="headerlink" title="HashMap的扩容"></a>HashMap的扩容</h3><p>HashMap含有一个阈值，当达到这个阈值，HashMap就会扩容，重新计算每一个元素的Hash，放到新的位置，默认扩容一倍。扩容也是为了减少元素碰撞的机率，阈值=数组长度xLoadFactor，默认LoadFactor为0.75。因此，回到上面，当我们想要存储1000个元素的时候，如果设置HashMap大小为1024，那么阈值为1024x0.75=768，即超过768就会发生扩容，会将数组长度扩大到2048，然后重新计算每个元素在数组中的位置，这是一个非常消耗资源的操作，因此正确的做法是应该new HashMap(2048)比较合适。我们说道HashMap是不安全的，它的不安全也主要体现在扩容的时候。</p><h3 id="HashMap的安全问题"><a href="#HashMap的安全问题" class="headerlink" title="HashMap的安全问题"></a>HashMap的安全问题</h3><p>在多线程操作时，扩容的时候如果多线程都进行reHash操作，那么有可能造成链表中的元素相互引用，即A的下一个指向B，B的下一个指向A，造成了死循环，从而导致线程不安全。如何让HashMap变成安全的？有三种方法。 </p><ol><li>替换成Hashtable，Hashtable通过对整个表上锁实现线程安全，因此效率比较低 </li><li><p>使用Collections类的synchronizedMap方法包装一下。方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function">Map&lt;K,V&gt; <span class="title">synchronizedMap</span><span class="params">(Map&lt;K,V&gt; m)</span></span></span><br></pre></td></tr></table></figure></li><li><p>使用ConcurrentHashMap，它使用分段锁来保证线程安全 通过前两种方式获得的线程安全的HashMap在读写数据的时候会对整个容器上锁，而ConcurrentHashMap并不需要对整个容器上锁，它只需要锁住要修改的部分就行了。 CHM引入了分割，并提供了HashTable支持的所有的功能。在CHM中，支持多线程对Map做读操作，并且不需要任何的<a href="http://javarevisited.blogspot.com/2012/02/what-is-blocking-methods-in-java-and.html" target="_blank" rel="noopener">blocking</a>。这得益于CHM将Map分割成了不同的部分，在执行更新操作时只锁住一部分。根据默认的并发级别(<code>concurrency level</code>)，Map被分割成16个部分，并且由不同的锁控制。这意味着，同时最多可以有16个写线程操作Map。试想一下，由只能一个线程进入变成同时可由16个写线程同时进入(读线程几乎不受限制)，性能的提升是显而易见的。但由于一些更新操作，如put(),remove(),putAll(),clear()只锁住操作的部分，所以在检索操作不能保证返回的是最新的结果。 另一个重要点是在迭代遍历CHM时，keySet返回的iterator是弱一致和<a href="http://javarevisited.blogspot.in/2012/02/fail-safe-vs-fail-fast-iterator-in-java.html" target="_blank" rel="noopener">fail-safe</a>的，可能不会返回某些最近的改变，并且在遍历过程中，如果已经遍历的数组上的内容变化了，不会抛出ConcurrentModificationExceptoin的异常。 CHM默认的并发级别是16，但可以在创建CHM时通过构造函数改变。毫无疑问，并发级别代表着并发执行更新操作的数目，所以如果只有很少的线程会更新Map，那么建议设置一个低的并发级别。另外，CHM还使用了ReentrantLock来对segments加锁。</p></li></ol><h3 id="什么时候使用ConcurrentHashMap"><a href="#什么时候使用ConcurrentHashMap" class="headerlink" title="什么时候使用ConcurrentHashMap"></a>什么时候使用ConcurrentHashMap</h3><p>CHM适用于读者数量超过写者时，当写者数量大于等于读者时，CHM的性能是低于Hashtable和synchronized Map的。这是因为当锁住了整个Map时，读操作要等待对同一部分执行写操作的线程结束。CHM适用于做cache,在程序启动时初始化，之后可以被多个请求线程访问。正如Javadoc说明的那样，CHM是HashTable一个很好的替代，但要记住，CHM的比HashTable的同步性稍弱。</p><ul><li>CHM允许并发的读和线程安全的更新操作</li><li>在执行写操作时，CHM只锁住部分的Map</li><li>并发的更新是通过内部根据并发级别将Map分割成小部分实现的</li><li>高的并发级别会造成时间和空间的浪费，低的并发级别在写线程多时会引起线程间的竞争</li><li>CHM的所有操作都是线程安全</li><li>CHM返回的迭代器是弱一致性，fail-safe并且不会抛出ConcurrentModificationException异常</li><li>CHM不允许null的键值</li><li>可以使用CHM代替HashTable，但要记住CHM不会锁住整个Map</li></ul><p>参考：<a href="http://www.importnew.com/21388.html" target="_blank" rel="noopener">http://www.importnew.com/21388.html</a> <a href="http://www.importnew.com/21388.html" target="_blank" rel="noopener">http://www.importnew.com/21388.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HashMap是一种结构非常巧妙的集合容器。HashMap是存储键值对的结构，key和value一一对应，key必须保证唯一，存储无序，线程不安全，这是它的一些基本特点。在java中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，hashmap也不例外。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.elietio.xyz/categories/Java/"/>
    
    
      <category term="HashMap" scheme="https://www.elietio.xyz/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>Java Web——Servlet开发入门</title>
    <link href="https://www.elietio.xyz/2017/08/java-web-servlet-development-portal.html"/>
    <id>https://www.elietio.xyz/2017/08/java-web-servlet-development-portal.html</id>
    <published>2017-08-11T08:07:18.000Z</published>
    <updated>2019-08-14T14:56:08.226Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Servlet是什么？"><a href="#Servlet是什么？" class="headerlink" title="Servlet是什么？"></a>Servlet是什么？</h3><p>Servlet，Server Applet,是一个Java编写的小程序，可以在Web服务器上运行（如Tomcat），它通过HTTP协议接受和响应客户端请求。客户端发送请求给Web服务器，服务器将请求信息发送给Servlet，Servlet生成响应，传递给服务器，服务器再响应至客户端。Servlet在Java中是一个接口，用于定义规则和拓展功能。<br><a id="more"></a></p><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><ol><li><p>初始化init<br>客户端发送请求访问servlet程序，Tomcat会在内存中查找是否存在该servlet的对象，如不存在，则调用init方法创建servlet对象，如已经存在，则直接使用。</p></li><li><p>运行service<br>Tomcat为请求创建ServletRequest对象和ServletResponse对象，每执行一次service方法都从ServletRequest中获取请求参数，通过ServletResponse发送响应给客户端。</p></li><li><p>销毁destory<br>当服务器关闭或者Web项目移除时，servlet会关闭，Tomat调用servlet的destory方法进行销毁，释放资源。</p></li></ol><h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p>Servlet是一个无协议的接口，定义了服务器和java程序之间规则。HttpServlet是它的一个子类，具有Http协议，它的service方法会对请求判断是执行doGet方法还是doPost方法，因此书写Servlet程序需要继承HttpServlet类，并复写doGet方法和doPost方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;enclosing_package&#125;;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;primary\_type\_name&#125; extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="web-xml配置Servlet"><a href="#web-xml配置Servlet" class="headerlink" title="web.xml配置Servlet"></a>web.xml配置Servlet</h3><p>通过web.xml配置，让url路径访问对应的servlet程序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>servlet程序的绝对路径<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet名称，与上面保持一致建立映射<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>访问路径，格式为"/具体内容"，表示的URL为localhost:8080/web项目名/具体内容<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h3><ol><li><p>客户端的路径，比如利用页面访问，一般使用绝对路径，后面加上项目名称<br>/:指的的是绝对路径，表示http：//ip:port<br>不带/表示相对路径，表示当前文件所在的父目录的路径</p></li><li><p>服务端路径，比如web.xml<br>/,绝对路径，代表http：/ip:port/项目名称</p></li></ol><h3 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h3><p>在开发中，servlet创建有时需要给定一些初始化参数，web服务器会把这些初始化信息封装到ServletConfig中，创建servlet时调用的init方法时，会将初始化信息传递给servlet，因此可以看作web程序的局部配置。</p><p>初始化信息在web.xml中的servlet标签中，以key和value的形式设置。获取初始化信息通过API getInitParameter(String name) 根据key获取value和 getInitParameterNames() 返回所有key的枚举</p><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>每一个web项目都是运行在java虚拟机中的一个web程序，它拥有一个与之对应的上下文对象，即ServletContext，它可以提供web程序中所有servlet共享的信息，即web程序的全局配置。</p><ol><li>ServletContext的设置是在web.xml的根目录中,想要获取配置信息需要先获取ServletContext对象。获取ServeltContext可以通过ServletConfig中的getServetContext()获取，或者通过继承的GenericServlet中的getServletContext()方法直接获取.然后通过ServetContext中的getInitParameterNames()或getInitParameterNames()获取全局配置信息.</li><li>ServletContext可以看作web程序的一个公共容器，一个web程序所有servlet都可以获取其中的数据。<br> 增加：setAttribute(String name,Object object)<br> 删除：removeAttribute(String name<br> 获取：getAttribute(String name)</li><li>ServeltContext读取文件路径<br> getRealPath(String path)    返回的是绝对路径，工程发布后，在电脑中的的实际路径<br> getContextPath()        获取项目的相对路径</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Servlet是什么？&quot;&gt;&lt;a href=&quot;#Servlet是什么？&quot; class=&quot;headerlink&quot; title=&quot;Servlet是什么？&quot;&gt;&lt;/a&gt;Servlet是什么？&lt;/h3&gt;&lt;p&gt;Servlet，Server Applet,是一个Java编写的小程序，可以在Web服务器上运行（如Tomcat），它通过HTTP协议接受和响应客户端请求。客户端发送请求给Web服务器，服务器将请求信息发送给Servlet，Servlet生成响应，传递给服务器，服务器再响应至客户端。Servlet在Java中是一个接口，用于定义规则和拓展功能。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.elietio.xyz/categories/Java/"/>
    
    
      <category term="servet" scheme="https://www.elietio.xyz/tags/servet/"/>
    
  </entry>
  
  <entry>
    <title>JAVA单例模式的七种写法</title>
    <link href="https://www.elietio.xyz/2017/06/java-singleton.html"/>
    <id>https://www.elietio.xyz/2017/06/java-singleton.html</id>
    <published>2017-06-25T16:29:32.000Z</published>
    <updated>2019-08-14T14:56:08.226Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>JAVA单例模式的七种写法<br><a id="more"></a></p><ul><li>第一种（懒汉，线程不安全）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125; </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">    instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> instance;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒加载，但是多线程单例会失败。</p><ul><li>第二种（懒汉，线程安全）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程安全，效率低，大多数情况下不需要同步。</p><ul><li>第三种（饿汉）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>避免了线程安全问题，但是instance在类加载的时候就实例化了，不能达到懒加载的效果。</p><ul><li>第四种（饿汉，变种）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> Singleton instance = <span class="keyword">null</span>;  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">    instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和第三种实际上差不多。类初始化的时候实例了instance</p><ul><li>第五种（静态内部类）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式同样利用了classloder的机制来保证初始化instance时只有一个线程，它跟第三种和第四种方式不同的是：第三种和第四种方式是只要Singleton类被装载了，那么instance就会被实例化（没有达到lazy loading效果），而这种方式是Singleton类被装载了，instance不一定被初始化。因为SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显示装载SingletonHolder类，从而实例化instance。</p><p>静态内部类和非静态内部类一样，都是在被调用时才会被加载。当只调用外部类的静态变量，静态方法时，是不会让静态内部类的被加载。</p><p>不过在加载静态内部类的过程中也会加载外部类。</p><ul><li>第六种（枚举）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象，jdk1.5以上支持</p><ul><li>第七种（双重校验锁）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 只锁定singleton==null的情况，一旦实例化后就不再同步。但是在singleton=new Singleton();这一步jvm执行是无序的，可能先设置了singleton为非空，再构造了Singleton，若此时其它线程进入了判断，singleton！=null，返回的singleton并不是Singleton的实例。 </p><p>在这里用到了volatile关键字，一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：</p><ul><li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</li><li>禁止进行指令重排序</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA单例模式的七种写法&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.elietio.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.elietio.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>盘点我的2016电子产品消费</title>
    <link href="https://www.elietio.xyz/2016/12/2016.html"/>
    <id>https://www.elietio.xyz/2016/12/2016.html</id>
    <published>2016-12-31T09:52:26.000Z</published>
    <updated>2019-08-14T14:56:08.222Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>2016年12月31，毕业已经一年半。我算是个喜欢捣鼓电子产品的人，大学的时候是个穷学生，囊肿羞涩，很多喜欢的电子产品只能网上看看止渴，现 在工作一年多，也算是有了一点点经济收入，可以尝试一下自己钟情已久的一些小玩意，在2016年的最后一年，盘点一下这一年剁手的电子产品。<br><a id="more"></a></p><h2 id="2016年剁手产品"><a href="#2016年剁手产品" class="headerlink" title="2016年剁手产品"></a>2016年剁手产品</h2><h3 id="1-NOKIA-N1"><a href="#1-NOKIA-N1" class="headerlink" title="1.NOKIA N1"></a>1.<a href="https://item.jd.com/1860108.html" target="_blank" rel="noopener">NOKIA N1</a></h3><p><img src="http://wx3.sinaimg.cn/mw690/8bf96619gy1fgz2g6dhn7j20b40b475x.jpg" alt="">   </p><p>诺 基亚（Nokia）N1平板, 7.9英寸 火山灰,年初3月购于京东。我们这个年龄的年轻人们都是经历了诺基亚的时代过来的，多多少少对诺基亚都有一份情怀，我也是如此。可惜这个平板只是贴了诺基 亚的牌而已，实际上由富士康生产，不过其素质还算可圈可点。2K的分辨率、7.9英寸全金属机身，虽然不支持扩展存储，但是机身存储32G也算够用，主要 是价格足够吸引人。算起来它的短板也不少，配置渣渣，系统万年5.0，4：3的比例看起视频来黑边实在碍眼，好在颜值不低，而且我的需求也只是用来看漫画 和PDF,这两点可以说是相当令我满意。2K的分辨率相当细腻，配合Perfect Viewer看看漫画，看看PDF文档，当然还有安卓神器EhViewer，玩游戏时候查查攻略，不过今年加班一直比较多，导致N1吃灰的时间也不少。</p><h3 id="2-AOC-P2491VWHE"><a href="#2-AOC-P2491VWHE" class="headerlink" title="2.AOC P2491VWHE"></a>2.<a href="https://item.jd.com/2168838.html" target="_blank" rel="noopener">AOC P2491VWHE</a></h3><p><img src="http://wx1.sinaimg.cn/mw690/8bf96619gy1fgz2g74deqj20e80aowhx.jpg" alt=""> </p><p>AOC P2491VWHE/BW， 23.6英寸1.6mm PLS显示器，4月购于京东。这个是今年我感觉买的非常值的东西了，终于不用再忍受笔记本那渣渣的分辨率和小显示屏了，看电影刷网页，爽的飞起，真是早就 该撸一个爽爽了。而其本身性价比和质量、显示效果只能说一般般，没有内置音箱，也没有音频输出接口，不过对于习惯了笔记本后改用这个所带来的感官体验还是 很棒的，自从入了这个，下电影基本都是1080P了，这样才够爽。</p><h3 id="3-ATH-IM50"><a href="#3-ATH-IM50" class="headerlink" title="3.ATH-IM50"></a>3.<a href="https://item.jd.com/1029008.html" target="_blank" rel="noopener">ATH-IM50</a></h3><p><a href="http://wx2.sinaimg.cn/large/8bf96619gy1fgz2g9j86zj20b40b4wgn.jpg" target="_blank" rel="noopener"><img src="http://ww2.sinaimg.cn/large/8bf96619gy1fgz2g9j86zj20b40b4wgn.jpg" alt=""></a> </p><p>铁 三角 ATH-IM50 双动圈入耳耳机，京东618活动入，用了减100券328入手。在此之前我一直很排斥入耳式耳机，我耳腔比较小，入耳式的耳机感觉带着很不舒服，但是入了 这个之后改变了我对入耳式耳机的看法，带着真是很舒服，耳挂式的设计也很好，虽然只是入门级的产品，双动圈的体验已经让我这个木耳党感觉非常惊艳了，入了 这个之后，手里的铁三角SQ505、T400、潜39_、_仿314P的蜂鸟我基本都没再听过。由于木耳，就不对玄学方面发表过多评价了，反正效果真的很棒，甚至后悔当初为啥没选IM70，当初感觉稍贵而且红色实在太骚难以驾驭，现在觉得要是入了IM70只会更爽啊，只能暗示自己反正我是木耳，没啥区别喽！</p><h3 id="4-建兴T9-128G-SSD"><a href="#4-建兴T9-128G-SSD" class="headerlink" title="4.建兴T9 128G SSD"></a>4.<a href="https://item.jd.com/2210087.html" target="_blank" rel="noopener">建兴T9 128G SSD</a></h3><p><img src="http://wx2.sinaimg.cn/large/8bf96619gy1fgz2g7f7yjj20e70aqgsa.jpg" alt=""> </p><p>建 兴(LITEON) 睿速系列 T9 128G SATA3 固态硬盘，主控Marvell 88SS9187， eMLC颗粒。8月购于京东，自己装了笔记本之后又帮同事买了一块换上。其实想上SSD很久了，但是懒癌发作一直懒得动，而且笔记本性能又太渣，感觉上了 效果也是打折扣，但是越来越受不了火狐那龟速的启动速度，potplay看了电影还得等了2S，感觉非常不爽，于是一怒果断上了SSD,建兴这个算是最便 宜的一款MLC SSD了，总体来说还是令人满意的，虽然笔记本还是渣渣，但是各种软件启动速度还是大大得到了提升，无奈笔记本性能有限，没法弄几个3A大作读条爽一把 了。</p><h3 id="5-SONY-PS4"><a href="#5-SONY-PS4" class="headerlink" title="5.SONY PS4"></a>5.<a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.s3I2fM&amp;id=36675389855&amp;_u=vuk25d4e8c0" target="_blank" rel="noopener">SONY PS4</a></h3><p><img src="http://wx3.sinaimg.cn/mw690/8bf96619gy1fgz2g84uyhj20e70aqn0x.jpg" alt=""><img src="http://wx1.sinaimg.cn/mw690/8bf96619gy1fgz2g908dlj20e70aqtdv.jpg" alt=""><img src="http://wx2.sinaimg.cn/large/8bf96619gy1fgz2g87n6yj20e70aq0yh.jpg" alt=""> </p><p>SONY PlayStation 4 港版 500G 1206型，9月在淘宝 S1版主的店里买的，索尼大法好！总算是充值了信仰，圆了一个梦。心动PS4很久了，却一直没下定决心买。最初是有意PSV的，大学PSV玩的闪轨，为了 玩到下一部轨迹，考虑过PSV,但是暴死V实在是没太多游戏可玩，而且感觉Falcom也该上PS4，但是轨迹的消息一直迟迟未出，东京迷城和伊苏8相继 发售，而且都会登录PS4，所以一直在观望状态。一直到9月，感觉那段时间心力憔悴，想找个发泄口，大半年都没再看动画了，找了几部也提不起兴趣，于是决 定入台PS4充值信仰，当时Slim已经泄漏,Pro，不对那个时候代号还是NEO的各种谣言满天飞，slim的外观感觉没有老版漂亮，于是直接入了港版 PS4，第一个入手的游戏是神秘海域4，也是淘宝买的实体版，当时真的是被画面和演出给震惊到了，游戏全程真的非常享受，如同欣赏一部波澜起伏的故事，而 这个故事是由我自己亲自操控的，真是带来了不一样体验，我是一个动作游戏苦手，也就只能玩玩鬼泣和暗黑血统这些动作游戏，大多数都是在玩RPG和一些 ARPG，神海4让我成为了顽皮狗粉，于是后来陆陆续续补了顽皮购的美国末日、神海1、2、3,并且接下来期待着神海4DLC和美末2。不过PSN游戏价 格和Steam比起来真是贵了好多，虽然实体版可以二手回血，但是往往数字版有打折活动，而且收藏癖发作实在不忍心卖二手，所以买游戏只能赶上打折或者非 常心动才舍得入手。前面也说了笔记本太渣，大学毕业之后基本就没玩过啥单机游戏了，入了PS4之后总算重拾了起来，下班之后玩会游戏放松一下，刷刷奖杯乐 此不疲，请让我高呼一声：索尼大法好啊！而明年闪轨三也要发售，PS4独占，只能对V公主说一声可惜了 </p><h3 id="6-The-Witcher-3-Game-of-the-Year-Edition-PS4"><a href="#6-The-Witcher-3-Game-of-the-Year-Edition-PS4" class="headerlink" title="6.The Witcher 3 Game of the Year Edition (PS4)"></a>6.<a href="https://www.amazon.co.uk/Witcher-Game-Year-PS4/dp/B01JYW2F1G/ref=sr_1_1?ie=UTF8&amp;qid=1480087688&amp;sr=8-1&amp;keywords=The+Witcher+3" target="_blank" rel="noopener">The Witcher 3 Game of the Year Edition (PS4)</a></h3><p><img src="http://wx4.sinaimg.cn/large/8bf96619gy1fgz2g5ppi6j20b60e8tgz.jpg" alt=""> </p><p>巫 师三—狂猎年度版。之所以把这个单独拿出来说，是因为这个比较特殊，我的第一次海淘，11月底购于英国亚马逊，算上邮费一共£19.87，前前后后花了半 个月多才到手。大学的时候忍受着20多帧玩了巫师二，久久难以忘怀，后来狂猎发售，好评如潮，但是没有设备可以体验，心理痒痒不已，入了PS4后终于可以 弥补一下。正好黑五那段时间英亚巫师三一直打折，而且自带繁体中文，价格也够便宜，比港服当时的活动6折还要便宜几十块，正好前段时间信用卡也申请成功， 于是果断下单。不得不说时间真的挺长的，从荷兰的阿姆斯特丹发货到我这大郑姆斯特丹，真是等了好久。上手之后感觉波兰人真是厚道，这游戏确实可以称得上是 波兰人的骄傲，不多说了，来局昆特盘吧！</p><h3 id="7-希捷-1T笔记本硬盘"><a href="#7-希捷-1T笔记本硬盘" class="headerlink" title="7.希捷 1T笔记本硬盘"></a>7.希捷 1T笔记本硬盘</h3><p><img src="http://wx2.sinaimg.cn/large/8bf96619gy1fgz2g94rhgj208y06rdhz.jpg" alt=""> </p><p>希 捷(SEAGATE)1T 5400转128M SATA3 笔记本硬盘(ST1000LM035)，这个没啥好说了，给PS4换的。一直在观望想买个1T或者2T的硬盘给PS4换上，结果硬盘价格涨的好厉害，碰到 双12京东总算舍得打折，于是入了块1T的。不得不说现在这PS4游戏真是蛮大的，即使是实体版也是要把游戏拷贝到机身里，光盘只是一个验证的作用，神海 四 58G、GTA5 65G 、巫师三 48G……想想几年前玩的游戏，变化真是大。</p><h2 id="2016年想体验的产品——VR、AR"><a href="#2016年想体验的产品——VR、AR" class="headerlink" title="2016年想体验的产品——VR、AR"></a>2016年想体验的产品——VR、AR</h2><p><img src="http://wx1.sinaimg.cn/large/8bf96619gy1fgz2g6js5nj20a506bmxu.jpg" alt=""> </p><p>VR 在16年炒得真是非常火爆，低端入门的各种盒子、眼镜，中高端的索尼PlayStation VR、HTC Vive、Oculus Rift，似乎以前科幻电影中的技术一下子走到了我们生活中，至于VR的前景和各大厂商产品的优劣在这里不在多说，我个人而言还是很希望这个技术能够良好 的发展下去，最终能点出脑后插管的黑科技。虽然技术的不成熟、游戏的单调与缺乏，即使是评价最好的PS VR也渐渐不在吸引人们的眼球，我还是对VR充满着信心，同理微软的AR HoloLens也是如此，希望17年能有机会亲自体验一下。</p><h2 id="2017年期待产品——Nintendo-Switch"><a href="#2017年期待产品——Nintendo-Switch" class="headerlink" title="2017年期待产品——Nintendo Switch"></a>2017年期待产品——Nintendo Switch</h2><p><img src="http://wx4.sinaimg.cn/large/8bf96619gy1fgz2g5xk6zj20ao0e80xb.jpg" alt=""> </p><p>不 得不说，任天堂的 Switch真是让人感觉到惊艳，掌机便携但是性能、显示效果有限，主机体验效果好但是便携性打了大大的折扣，而Switch让二者合二为一的设计可以说 是玩家一直以来的一个梦想。虽然现在已经曝光了很多信息，至于到底其实际体验效果会如何，还是期待明年3月的发布会，希望任天堂能带来惊喜，再创一个传 奇。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年12月31，毕业已经一年半。我算是个喜欢捣鼓电子产品的人，大学的时候是个穷学生，囊肿羞涩，很多喜欢的电子产品只能网上看看止渴，现 在工作一年多，也算是有了一点点经济收入，可以尝试一下自己钟情已久的一些小玩意，在2016年的最后一年，盘点一下这一年剁手的电子产品。&lt;br&gt;
    
    </summary>
    
      <category term="电子产品" scheme="https://www.elietio.xyz/categories/%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81/"/>
    
    
      <category term="电子产品" scheme="https://www.elietio.xyz/tags/%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>Java类加载以及对象创建过程</title>
    <link href="https://www.elietio.xyz/2016/12/java-classload.html"/>
    <id>https://www.elietio.xyz/2016/12/java-classload.html</id>
    <published>2016-12-31T09:26:28.000Z</published>
    <updated>2019-08-14T14:56:08.225Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>对于Java类加载以及对象创建的过程，首先看一下JVM虚拟机运行时内存中的数据分布 <img src="http://ww4.sinaimg.cn/large/8bf96619gy1fkwyisb3klj219f0tbdir.jpg" alt=""><br><a id="more"></a></p><h3 id="分布"><a href="#分布" class="headerlink" title="分布"></a>分布</h3><ul><li>私有： <ul><li>栈内存Stack：栈结果，先进后出，方法进栈执行，执行完毕出栈，方法中的局部变量、操作数栈、动态链接、方法返回值都保存在此处。 </li><li>本地方法区：加载本地非java语言代码的入口 </li><li>程序计数器：由于多线程CPU在各线程之间来回切换，因此程序计数器来标记当前线程执行到的代码的位置 </li></ul></li><li>共享：<ul><li>堆内存：存放对象实例，占据内存最大的一块区域，有独特的GC回收机制回收没有引用关联的对象，可分为年轻代和年老代 </li><li>方法区：存储加载的类信息、常量区、静态变量、JIT（即时编译器）处理后的数据等 </li></ul></li></ul><h3 id="类加载及对象创建过程："><a href="#类加载及对象创建过程：" class="headerlink" title="类加载及对象创建过程："></a>类加载及对象创建过程：</h3><ol><li>启动JVM，开始分配内存空间</li><li>将编译后的.class文件加载到方法区，非静态内容加载到非静态的区域，静态内容加载到静态区，静态方法调用的时候才会加载</li><li>给静态成员变量默认初始化，默认初始化完成之后开始显示初始化</li><li>执行静态代码块，先执行父类的静态代码块再执行子类的静态代码块</li><li>执行main方法的时候，栈内存开辟空间，压栈–进栈</li><li>main方法的栈区分配了一个变量P</li><li>在堆内存中开辟一个对象空间，首先会去方法区查找类是否加载</li><li>类已经加载，开始对象创建，在对象空间对非静态成员变量默认初始化</li><li><p>加载对应构造函数，执行隐式三步 </p><ol><li>隐式的super(); </li><li>显示初始化(给所有的非静态的成员变量)</li><li>执行构造代码块</li></ol></li><li><p>执行构造函数中的代码</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于Java类加载以及对象创建的过程，首先看一下JVM虚拟机运行时内存中的数据分布 &lt;img src=&quot;http://ww4.sinaimg.cn/large/8bf96619gy1fkwyisb3klj219f0tbdir.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.elietio.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.elietio.xyz/tags/Java/"/>
    
      <category term="jvm" scheme="https://www.elietio.xyz/tags/jvm/"/>
    
      <category term="类加载" scheme="https://www.elietio.xyz/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
</feed>
